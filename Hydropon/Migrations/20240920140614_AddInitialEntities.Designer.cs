// <auto-generated />
using System;
using Hydropon.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hydropon.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240920140614_AddInitialEntities")]
    partial class AddInitialEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("Hydropon.Data.Models.PlantProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("LightOffTime")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("LightOnTime")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MaxEC")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MaxPH")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MinEC")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MinPH")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PlantProfiles");
                });

            modelBuilder.Entity("Hydropon.Data.Models.SensorReadings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("EC")
                        .HasColumnType("REAL");

                    b.Property<double>("LightIntensity")
                        .HasColumnType("REAL");

                    b.Property<double>("PH")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<double>("WaterTemperature")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("SensorReadings");
                });

            modelBuilder.Entity("Hydropon.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Hydropon.Data.Models.UserSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DefaultPlantProfileId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NotificationEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("NotificationsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NotifyOnECThreshold")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NotifyOnPHThreshold")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NotifyOnSystemFailure")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NotifyOnWaterLevelLow")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DefaultPlantProfileId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("Hydropon.Data.Models.PlantProfile", b =>
                {
                    b.HasOne("Hydropon.Data.Models.User", null)
                        .WithMany("PlantProfiles")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Hydropon.Data.Models.UserSettings", b =>
                {
                    b.HasOne("Hydropon.Data.Models.PlantProfile", "DefaultPlantProfile")
                        .WithMany()
                        .HasForeignKey("DefaultPlantProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hydropon.Data.Models.User", "User")
                        .WithOne("UserSettings")
                        .HasForeignKey("Hydropon.Data.Models.UserSettings", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DefaultPlantProfile");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hydropon.Data.Models.User", b =>
                {
                    b.Navigation("PlantProfiles");

                    b.Navigation("UserSettings")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
